/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.projectDSL.RestAPI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.xtext.example.mydsl.projectDSL.Entity
import org.xtext.example.mydsl.projectDSL.Controller
import org.xtext.example.mydsl.projectDSL.Parameter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ProjectDSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val RestAPI modelInstance = resource.allContents.filter(RestAPI).next
		val entity = modelInstance.declarations.filter(Entity)
		generateApp(fsa, entity.get(0))
		// Generate each of the controller files
		modelInstance.declarations.filter(Controller).forEach[generateControllers(fsa)]
		// modelInstance.display
	}
	
	// Generates the app.js file
	def generateApp(IFileSystemAccess2 access1, Entity entity) {
		access1.generateFile('app.js', entity.generateEntity);
	}
	
	// Generates the controller js files
	def generateControllers(IFileSystemAccess2 access2) {
		
	}
		
	// Appends the entity data to the app.js file
	def generateEntity(Entity entity) '''
		const express = require('express')
		const app = express()
		const port = 3000	
		«FOR p:entity.parameters»
		«FOR t:p.type»
		«switch t.toString {
			case 'C': '''app.post('/post«p.name»') { «p.name.toFirstLower»Controller.post«p.name» }'''
			case 'R': '''app.read('/read«p.name»') {«p.name.toFirstLower»Controller.read«p.name» }'''
			case 'U': '''app.put('/put«p.name»') { «p.name.toFirstLower»Controller.put«p.name» }'''
			case 'D': '''app.delete('/delete«p.name»') { «p.name.toFirstLower»Controller.delete«p.name» }'''
		}»
		«ENDFOR»
		«ENDFOR»
	'''
	
	
	def display(EObject model) {
		val res = new XMLResourceImpl
		res.contents.add(EcoreUtil::copy(model))
		System::out.println("Dump of model:")
		res.save(System.out, null)
	}
}
