/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl.projectDSL.Endpoint
import org.xtext.example.mydsl.projectDSL.ProjectDSLPackage.Literals
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.mydsl.projectDSL.Controller
import java.util.ArrayList
import org.xtext.example.mydsl.projectDSL.Parameter
import org.eclipse.xtext.scoping.Scopes
import java.util.HashSet
import org.xtext.example.mydsl.projectDSL.Entity
import java.util.Collections

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
 
class ProjectDSLScopeProvider extends AbstractProjectDSLScopeProvider {
	
	override IScope getScope(EObject context, EReference reference) {
        switch(context) {
            Endpoint case reference == Literals.ENDPOINT__ENDPOINT : {
                val controller = EcoreUtil2.getContainerOfType(context, Controller);
                val result = new ArrayList<Parameter>
                controller.base.forEach[result.addAll(it.allParameters)]
                return Scopes.scopeFor(result);
            }
        }
        super.getScope(context, reference);
    }
    
    //helper method for adding all parameters from the super class
    def ArrayList<Parameter> allParameters(Entity entity){
    	val candidates = new ArrayList<Parameter>
    	val seen = new HashSet<Entity>
    	var e = entity
    	while (e !== null){
    		if(seen.contains(e)) return Collections.EMPTY_LIST as ArrayList<Parameter>
    		seen.add(e)
    		candidates.addAll(e.parameters.filter(Parameter))
    		e = e.parent
    	}
    	return candidates
    }
}
