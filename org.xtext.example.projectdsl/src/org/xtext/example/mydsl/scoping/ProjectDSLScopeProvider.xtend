/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl.projectDSL.Endpoint
import org.xtext.example.mydsl.projectDSL.ProjectDSLPackage.Literals
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.mydsl.projectDSL.Controller
import java.util.ArrayList
import org.xtext.example.mydsl.projectDSL.Parameter
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.projectDSL.Entity
import org.xtext.example.mydsl.projectDSL.Param

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
 
class ProjectDSLScopeProvider extends AbstractProjectDSLScopeProvider {
	
	override IScope getScope(EObject context, EReference reference) {
        switch(context) {
            Endpoint case reference == Literals.ENDPOINT__ENDPOINT : {
                val controller = EcoreUtil2.getContainerOfType(context, Controller);
                val result = new ArrayList<Parameter>
                controller.base.forEach[result.addAll(it.parameters)]
                controller.base.forEach[if(it.parent !== null) {result.addAll(it.parent.parameters)}]
                return Scopes.scopeFor(result);
            }
       // Scoping rules that allows for cross-referencing between entities.
            Param case reference.EContainingClass == Literals.PARAM : {
            	val entity = EcoreUtil2.getContainerOfType(context, Entity);
            	val result = new ArrayList<Parameter>
            		entity.parameters.forEach[result.add(it)]
            	if(entity.parent !== null) {
            		entity.parent.parameters.forEach[result.add(it)]
            	}
            	return Scopes.scopeFor(result);
            }            
        }
        super.getScope(context, reference);
    }
}
