/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.function.Consumer;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.xtext.example.mydsl.projectDSL.Controller;
import org.xtext.example.mydsl.projectDSL.Declaration;
import org.xtext.example.mydsl.projectDSL.Endpoint;
import org.xtext.example.mydsl.projectDSL.Entity;
import org.xtext.example.mydsl.projectDSL.Parameter;
import org.xtext.example.mydsl.projectDSL.ProjectDSLPackage;
import org.xtext.example.mydsl.projectDSL.RestAPI;
import org.xtext.example.mydsl.projectDSL.impl.ControllerImpl;
import org.xtext.example.mydsl.projectDSL.impl.EntityImpl;
import org.xtext.example.mydsl.validation.AbstractProjectDSLValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ProjectDSLValidator extends AbstractProjectDSLValidator {
  @Check
  public void checkMakeOperations(final Controller c) {
    final ArrayList<String> endpointNames = new ArrayList<String>();
    final Consumer<Endpoint> _function = (Endpoint it) -> {
      boolean _contains = endpointNames.contains(it.getEndpoint().getName());
      if (_contains) {
        String _name = it.getEndpoint().getName();
        String _plus = ("Endpoint " + _name);
        String _plus_1 = (_plus + " already exists!");
        this.error(_plus_1, it, ProjectDSLPackage.Literals.ENDPOINT__ENDPOINT);
      } else {
        endpointNames.add(it.getEndpoint().getName());
      }
    };
    c.getEndpoint().forEach(_function);
  }
  
  @Check
  public void checkDuplicateUsesStatement(final Controller c) {
    final ArrayList<String> entitiesUsed = new ArrayList<String>();
    final Consumer<Entity> _function = (Entity it) -> {
      boolean _contains = entitiesUsed.contains(it.getName());
      if (_contains) {
        String _name = it.getName();
        String _plus = ("Entity " + _name);
        String _plus_1 = (_plus + " is already used by ");
        String _name_1 = c.getName();
        String _plus_2 = (_plus_1 + _name_1);
        this.error(_plus_2, c, ProjectDSLPackage.Literals.CONTROLLER__BASE);
      } else {
        entitiesUsed.add(it.getName());
      }
    };
    c.getBase().forEach(_function);
  }
  
  @Check
  public void checkDuplicateParameter(final Entity e) {
    final ArrayList<String> entityParameterNames = new ArrayList<String>();
    Entity _parent = e.getParent();
    boolean _tripleNotEquals = (_parent != null);
    if (_tripleNotEquals) {
      final Consumer<Parameter> _function = (Parameter it) -> {
        boolean _contains = entityParameterNames.contains(it.getName());
        if (_contains) {
          String _name = it.getName();
          String _plus = ("Parameter " + _name);
          String _plus_1 = (_plus + " already exists!");
          this.error(_plus_1, it, ProjectDSLPackage.Literals.PARAMETER__NAME);
        } else {
          entityParameterNames.add(it.getName());
        }
      };
      e.getParent().getParameters().forEach(_function);
    }
    final Consumer<Parameter> _function_1 = (Parameter it) -> {
      boolean _contains = entityParameterNames.contains(it.getName());
      if (_contains) {
        String _name = it.getName();
        String _plus = ("Parameter " + _name);
        String _plus_1 = (_plus + " already exists!");
        this.error(_plus_1, it, ProjectDSLPackage.Literals.PARAMETER__NAME);
      } else {
        entityParameterNames.add(it.getName());
      }
    };
    e.getParameters().forEach(_function_1);
  }
  
  @Check
  public void checkDuplicateCRUD(final Parameter parameter) {
    for (int i = 0; (i < ((Object[])Conversions.unwrapArray(parameter.getType(), Object.class)).length); i++) {
      for (int j = 0; (j < ((Object[])Conversions.unwrapArray(parameter.getType(), Object.class)).length); j++) {
        if (((i != j) && Objects.equal(parameter.getType().get(i), parameter.getType().get(j)))) {
          String _get = parameter.getType().get(i);
          String _plus = ("Parameters contains duplicates of " + _get);
          this.error(_plus, parameter, ProjectDSLPackage.Literals.PARAMETER__NAME);
        }
      }
    }
  }
  
  @Check
  public void checkDuplicateEntitiesOrControllers(final RestAPI api) {
    final ArrayList<String> entityNames = new ArrayList<String>();
    final ArrayList<String> controllerNames = new ArrayList<String>();
    final Consumer<Declaration> _function = (Declaration it) -> {
      if ((Objects.equal(it.getClass(), EntityImpl.class) && (!entityNames.contains(it.getName())))) {
        entityNames.add(it.getName());
      } else {
        if ((Objects.equal(it.getClass(), ControllerImpl.class) && (!controllerNames.contains(it.getName())))) {
          controllerNames.add(it.getName());
        } else {
          String _name = it.getName();
          String _plus = (_name + " already exists");
          this.error(_plus, it, null);
        }
      }
    };
    api.getDeclarations().forEach(_function);
  }
}
