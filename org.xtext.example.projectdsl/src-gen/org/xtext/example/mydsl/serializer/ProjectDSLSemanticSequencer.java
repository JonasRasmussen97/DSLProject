/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.projectDSL.Controller;
import org.xtext.example.mydsl.projectDSL.Endpoint;
import org.xtext.example.mydsl.projectDSL.Entity;
import org.xtext.example.mydsl.projectDSL.ProjectDSLPackage;
import org.xtext.example.mydsl.projectDSL.Redirect;
import org.xtext.example.mydsl.projectDSL.RestAPI;
import org.xtext.example.mydsl.services.ProjectDSLGrammarAccess;

@SuppressWarnings("all")
public class ProjectDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ProjectDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProjectDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProjectDSLPackage.CONTROLLER:
				sequence_Controller(context, (Controller) semanticObject); 
				return; 
			case ProjectDSLPackage.ENDPOINT:
				sequence_Endpoint(context, (Endpoint) semanticObject); 
				return; 
			case ProjectDSLPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case ProjectDSLPackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.example.mydsl.projectDSL.Parameter) semanticObject); 
				return; 
			case ProjectDSLPackage.REDIRECT:
				sequence_Redirect(context, (Redirect) semanticObject); 
				return; 
			case ProjectDSLPackage.REST_API:
				sequence_RestAPI(context, (RestAPI) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Declaration returns Controller
	 *     Controller returns Controller
	 *
	 * Constraint:
	 *     (name=ID base+=[Entity|ID] base+=[Entity|ID]* endpoint+=Endpoint+)
	 */
	protected void sequence_Controller(ISerializationContext context, Controller semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Endpoint returns Endpoint
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Endpoint(ISerializationContext context, Endpoint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectDSLPackage.Literals.ENDPOINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectDSLPackage.Literals.ENDPOINT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEndpointAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID parameters+=Parameter+)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID type+=Type+ base=Redirect?)
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.example.mydsl.projectDSL.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Redirect returns Redirect
	 *
	 * Constraint:
	 *     (name=[Controller|ID] | url=STRING)
	 */
	protected void sequence_Redirect(ISerializationContext context, Redirect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RestAPI returns RestAPI
	 *
	 * Constraint:
	 *     (name=ID declarations+=Declaration*)
	 */
	protected void sequence_RestAPI(ISerializationContext context, RestAPI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
