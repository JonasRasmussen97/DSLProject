/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.projectDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.projectDSL.MathContent;
import org.xtext.example.mydsl.projectDSL.MathExp;
import org.xtext.example.mydsl.projectDSL.Parameter;
import org.xtext.example.mydsl.projectDSL.ProjectDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Math Content</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.projectDSL.impl.MathContentImpl#getRight <em>Right</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.projectDSL.impl.MathContentImpl#getMathType <em>Math Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.projectDSL.impl.MathContentImpl#getMath <em>Math</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MathContentImpl extends MinimalEObjectImpl.Container implements MathContent
{
  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected Parameter right;

  /**
   * The default value of the '{@link #getMathType() <em>Math Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMathType()
   * @generated
   * @ordered
   */
  protected static final String MATH_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMathType() <em>Math Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMathType()
   * @generated
   * @ordered
   */
  protected String mathType = MATH_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getMath() <em>Math</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMath()
   * @generated
   * @ordered
   */
  protected MathExp math;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MathContentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ProjectDSLPackage.Literals.MATH_CONTENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter getRight()
  {
    if (right != null && right.eIsProxy())
    {
      InternalEObject oldRight = (InternalEObject)right;
      right = (Parameter)eResolveProxy(oldRight);
      if (right != oldRight)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProjectDSLPackage.MATH_CONTENT__RIGHT, oldRight, right));
      }
    }
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter basicGetRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight(Parameter newRight)
  {
    Parameter oldRight = right;
    right = newRight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProjectDSLPackage.MATH_CONTENT__RIGHT, oldRight, right));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMathType()
  {
    return mathType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMathType(String newMathType)
  {
    String oldMathType = mathType;
    mathType = newMathType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProjectDSLPackage.MATH_CONTENT__MATH_TYPE, oldMathType, mathType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathExp getMath()
  {
    return math;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMath(MathExp newMath, NotificationChain msgs)
  {
    MathExp oldMath = math;
    math = newMath;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ProjectDSLPackage.MATH_CONTENT__MATH, oldMath, newMath);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMath(MathExp newMath)
  {
    if (newMath != math)
    {
      NotificationChain msgs = null;
      if (math != null)
        msgs = ((InternalEObject)math).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ProjectDSLPackage.MATH_CONTENT__MATH, null, msgs);
      if (newMath != null)
        msgs = ((InternalEObject)newMath).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ProjectDSLPackage.MATH_CONTENT__MATH, null, msgs);
      msgs = basicSetMath(newMath, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProjectDSLPackage.MATH_CONTENT__MATH, newMath, newMath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ProjectDSLPackage.MATH_CONTENT__MATH:
        return basicSetMath(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ProjectDSLPackage.MATH_CONTENT__RIGHT:
        if (resolve) return getRight();
        return basicGetRight();
      case ProjectDSLPackage.MATH_CONTENT__MATH_TYPE:
        return getMathType();
      case ProjectDSLPackage.MATH_CONTENT__MATH:
        return getMath();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ProjectDSLPackage.MATH_CONTENT__RIGHT:
        setRight((Parameter)newValue);
        return;
      case ProjectDSLPackage.MATH_CONTENT__MATH_TYPE:
        setMathType((String)newValue);
        return;
      case ProjectDSLPackage.MATH_CONTENT__MATH:
        setMath((MathExp)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ProjectDSLPackage.MATH_CONTENT__RIGHT:
        setRight((Parameter)null);
        return;
      case ProjectDSLPackage.MATH_CONTENT__MATH_TYPE:
        setMathType(MATH_TYPE_EDEFAULT);
        return;
      case ProjectDSLPackage.MATH_CONTENT__MATH:
        setMath((MathExp)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ProjectDSLPackage.MATH_CONTENT__RIGHT:
        return right != null;
      case ProjectDSLPackage.MATH_CONTENT__MATH_TYPE:
        return MATH_TYPE_EDEFAULT == null ? mathType != null : !MATH_TYPE_EDEFAULT.equals(mathType);
      case ProjectDSLPackage.MATH_CONTENT__MATH:
        return math != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (mathType: ");
    result.append(mathType);
    result.append(')');
    return result.toString();
  }

} //MathContentImpl
