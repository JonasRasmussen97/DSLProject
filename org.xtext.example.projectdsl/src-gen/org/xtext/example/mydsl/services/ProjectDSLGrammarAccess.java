/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProjectDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RestAPIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.RestAPI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//RestAPI:
		//	'system' name=ID declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID declarations+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cControllerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Keeps a track of which elements are allowed to be created.
		//Declaration:
		//	Entity | Controller;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Controller
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Controller
		public RuleCall getControllerParserRuleCall_1() { return cControllerParserRuleCall_1; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRequiresKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCtrlrAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCtrlrControllerCrossReference_3_0 = (CrossReference)cCtrlrAssignment_3.eContents().get(0);
		private final RuleCall cCtrlrControllerIDTerminalRuleCall_3_0_1 = (RuleCall)cCtrlrControllerCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity:
		//	'entity' name=ID 'requires' ctrlr=[Controller] '{' parameters+=Parameter+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID 'requires' ctrlr=[Controller] '{' parameters+=Parameter+ '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'requires'
		public Keyword getRequiresKeyword_2() { return cRequiresKeyword_2; }
		
		//ctrlr=[Controller]
		public Assignment getCtrlrAssignment_3() { return cCtrlrAssignment_3; }
		
		//[Controller]
		public CrossReference getCtrlrControllerCrossReference_3_0() { return cCtrlrControllerCrossReference_3_0; }
		
		//ID
		public RuleCall getCtrlrControllerIDTerminalRuleCall_3_0_1() { return cCtrlrControllerIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//parameters+=Parameter+
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_0() { return cParametersParameterParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cUsesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBaseEntityCrossReference_3_0 = (CrossReference)cBaseAssignment_3.eContents().get(0);
		private final RuleCall cBaseEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cBaseEntityCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBaseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cBaseEntityCrossReference_4_1_0 = (CrossReference)cBaseAssignment_4_1.eContents().get(0);
		private final RuleCall cBaseEntityIDTerminalRuleCall_4_1_0_1 = (RuleCall)cBaseEntityCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMakeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEndpointAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEndpointEndpointParserRuleCall_6_1_0 = (RuleCall)cEndpointAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Example of syntax: controller Weather uses Entity1, Entity {make Weather}
		//Controller:
		//	'controller' name=ID 'uses' base+=[Entity] (',' base+=[Entity])* '{' ('make' endpoint+=Endpoint)+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'controller' name=ID 'uses' base+=[Entity] (',' base+=[Entity])* '{' ('make' endpoint+=Endpoint)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'controller'
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'uses'
		public Keyword getUsesKeyword_2() { return cUsesKeyword_2; }
		
		//base+=[Entity]
		public Assignment getBaseAssignment_3() { return cBaseAssignment_3; }
		
		//[Entity]
		public CrossReference getBaseEntityCrossReference_3_0() { return cBaseEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getBaseEntityIDTerminalRuleCall_3_0_1() { return cBaseEntityIDTerminalRuleCall_3_0_1; }
		
		//(',' base+=[Entity])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//base+=[Entity]
		public Assignment getBaseAssignment_4_1() { return cBaseAssignment_4_1; }
		
		//[Entity]
		public CrossReference getBaseEntityCrossReference_4_1_0() { return cBaseEntityCrossReference_4_1_0; }
		
		//ID
		public RuleCall getBaseEntityIDTerminalRuleCall_4_1_0_1() { return cBaseEntityIDTerminalRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('make' endpoint+=Endpoint)+
		public Group getGroup_6() { return cGroup_6; }
		
		//'make'
		public Keyword getMakeKeyword_6_0() { return cMakeKeyword_6_0; }
		
		//endpoint+=Endpoint
		public Assignment getEndpointAssignment_6_1() { return cEndpointAssignment_6_1; }
		
		//Endpoint
		public RuleCall getEndpointEndpointParserRuleCall_6_1_0() { return cEndpointEndpointParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EndpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Endpoint");
		private final Assignment cEndpointAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEndpointParameterCrossReference_0 = (CrossReference)cEndpointAssignment.eContents().get(0);
		private final RuleCall cEndpointParameterIDTerminalRuleCall_0_1 = (RuleCall)cEndpointParameterCrossReference_0.eContents().get(1);
		
		//// Are used for all the endpoints in controllers e.g., make 'Weather' 
		//Endpoint:
		//	endpoint=[Parameter];
		@Override public ParserRule getRule() { return rule; }
		
		//endpoint=[Parameter]
		public Assignment getEndpointAssignment() { return cEndpointAssignment; }
		
		//[Parameter]
		public CrossReference getEndpointParameterCrossReference_0() { return cEndpointParameterCrossReference_0; }
		
		//ID
		public RuleCall getEndpointParameterIDTerminalRuleCall_0_1() { return cEndpointParameterIDTerminalRuleCall_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataTypeIDTerminalRuleCall_2_0 = (RuleCall)cDataTypeAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRequireKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMathAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMathComparisonParserRuleCall_5_1_0 = (RuleCall)cMathAssignment_5_1.eContents().get(0);
		
		//Parameter:
		//	name=ID '=' dataType=ID ':' type+=Type+ ('require' math=Comparison)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' dataType=ID ':' type+=Type+ ('require' math=Comparison)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//dataType=ID
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }
		
		//ID
		public RuleCall getDataTypeIDTerminalRuleCall_2_0() { return cDataTypeIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type+=Type+
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
		
		//('require' math=Comparison)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'require'
		public Keyword getRequireKeyword_5_0() { return cRequireKeyword_5_0; }
		
		//math=Comparison
		public Assignment getMathAssignment_5_1() { return cMathAssignment_5_1; }
		
		//Comparison
		public RuleCall getMathComparisonParserRuleCall_5_1_0() { return cMathComparisonParserRuleCall_5_1_0; }
	}
	public class RedirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Redirect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cNameControllerCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameControllerIDTerminalRuleCall_0_0_1 = (RuleCall)cNameControllerCrossReference_0_0.eContents().get(1);
		private final Assignment cUrlAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//// Redirect can either be a controller reference or a string. 
		//Redirect:
		//	name=[Controller] | url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Controller] | url=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=[Controller]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Controller]
		public CrossReference getNameControllerCrossReference_0_0() { return cNameControllerCrossReference_0_0; }
		
		//ID
		public RuleCall getNameControllerIDTerminalRuleCall_0_0_1() { return cNameControllerIDTerminalRuleCall_0_0_1; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// Indicates the different CRUD operations. 
		//Type:
		//	'R' | 'U';
		@Override public ParserRule getRule() { return rule; }
		
		//'R' | 'U'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'R'
		public Keyword getRKeyword_0() { return cRKeyword_0; }
		
		//'U'
		public Keyword getUKeyword_1() { return cUKeyword_1; }
	}
	public class MathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.MathExp");
		private final Assignment cExpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_0 = (RuleCall)cExpAssignment.eContents().get(0);
		
		//MathExp:
		//	exp=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//exp=Exp
		public Assignment getExpAssignment() { return cExpAssignment; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_0() { return cExpExpParserRuleCall_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cMinusLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp Expression:
		//	MulOrDiv (('+' {Plus.left=current} | '-' {Minus.left=current}) right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (('+' {Plus.left=current} | '-' {Minus.left=current}) right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(('+' {Plus.left=current} | '-' {Minus.left=current}) right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Plus.left=current} | '-' {Minus.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Plus.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_1() { return cPlusLeftAction_1_0_0_1; }
		
		//'-' {Minus.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_1() { return cMinusLeftAction_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Mult.left=current} | '/' {Div.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Mult.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_1() { return cMultLeftAction_1_0_0_1; }
		
		//'/' {Div.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_1() { return cDivLeftAction_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary Expression:
		//	Number | Parenthesis;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | Parenthesis
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_1() { return cParenthesisParserRuleCall_1; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Comparison Expression:
		//	left=Exp op=(">=" | "<=" | ">" | "<") right=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Exp op=(">=" | "<=" | ">" | "<") right=Exp
		public Group getGroup() { return cGroup; }
		
		//left=Exp
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Exp
		public RuleCall getLeftExpParserRuleCall_0_0() { return cLeftExpParserRuleCall_0_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_2() { return cOpGreaterThanSignKeyword_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_3() { return cOpLessThanSignKeyword_1_0_3; }
		
		//right=Exp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Exp
		public RuleCall getRightExpParserRuleCall_2_0() { return cRightExpParserRuleCall_2_0; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis Expression:
		//	'(' Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Exp ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.ProjectDSL.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Number Expression:
		//	{Num} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Num} value=INT
		public Group getGroup() { return cGroup; }
		
		//{Num}
		public Action getNumAction_0() { return cNumAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	
	
	private final RestAPIElements pRestAPI;
	private final DeclarationElements pDeclaration;
	private final EntityElements pEntity;
	private final ControllerElements pController;
	private final EndpointElements pEndpoint;
	private final ParameterElements pParameter;
	private final RedirectElements pRedirect;
	private final TypeElements pType;
	private final MathExpElements pMathExp;
	private final ExpElements pExp;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final ComparisonElements pComparison;
	private final ParenthesisElements pParenthesis;
	private final NumberElements pNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProjectDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRestAPI = new RestAPIElements();
		this.pDeclaration = new DeclarationElements();
		this.pEntity = new EntityElements();
		this.pController = new ControllerElements();
		this.pEndpoint = new EndpointElements();
		this.pParameter = new ParameterElements();
		this.pRedirect = new RedirectElements();
		this.pType = new TypeElements();
		this.pMathExp = new MathExpElements();
		this.pExp = new ExpElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pComparison = new ComparisonElements();
		this.pParenthesis = new ParenthesisElements();
		this.pNumber = new NumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.ProjectDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RestAPI:
	//	'system' name=ID declarations+=Declaration*;
	public RestAPIElements getRestAPIAccess() {
		return pRestAPI;
	}
	
	public ParserRule getRestAPIRule() {
		return getRestAPIAccess().getRule();
	}
	
	//// Keeps a track of which elements are allowed to be created.
	//Declaration:
	//	Entity | Controller;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID 'requires' ctrlr=[Controller] '{' parameters+=Parameter+ '}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//// Example of syntax: controller Weather uses Entity1, Entity {make Weather}
	//Controller:
	//	'controller' name=ID 'uses' base+=[Entity] (',' base+=[Entity])* '{' ('make' endpoint+=Endpoint)+ '}';
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}
	
	//// Are used for all the endpoints in controllers e.g., make 'Weather' 
	//Endpoint:
	//	endpoint=[Parameter];
	public EndpointElements getEndpointAccess() {
		return pEndpoint;
	}
	
	public ParserRule getEndpointRule() {
		return getEndpointAccess().getRule();
	}
	
	//Parameter:
	//	name=ID '=' dataType=ID ':' type+=Type+ ('require' math=Comparison)?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Redirect can either be a controller reference or a string. 
	//Redirect:
	//	name=[Controller] | url=STRING;
	public RedirectElements getRedirectAccess() {
		return pRedirect;
	}
	
	public ParserRule getRedirectRule() {
		return getRedirectAccess().getRule();
	}
	
	//// Indicates the different CRUD operations. 
	//Type:
	//	'R' | 'U';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MathExp:
	//	exp=Exp;
	public MathExpElements getMathExpAccess() {
		return pMathExp;
	}
	
	public ParserRule getMathExpRule() {
		return getMathExpAccess().getRule();
	}
	
	//Exp Expression:
	//	MulOrDiv (('+' {Plus.left=current} | '-' {Minus.left=current}) right=MulOrDiv)*;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary (('*' {Mult.left=current} | '/' {Div.left=current}) right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	Number | Parenthesis;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Comparison Expression:
	//	left=Exp op=(">=" | "<=" | ">" | "<") right=Exp;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Parenthesis Expression:
	//	'(' Exp ')';
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//Number Expression:
	//	{Num} value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
